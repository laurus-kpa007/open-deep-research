version: '3.8'

services:
  # Backend Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "0.0.0.0:8000:8000"  # 모든 인터페이스에서 접속 가능
    environment:
      - OLLAMA_BASE_URL=http://ollama:11434
      - TAVILY_API_KEY=${TAVILY_API_KEY:-}
      - DATABASE_URL=postgresql+asyncpg://research_user:research_pass@postgres:5432/research_db
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3000}  # 실제 도메인으로 변경 필요
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - LOG_LEVEL=INFO
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000}  # 허용할 원격 주소 설정
    depends_on:
      - ollama
      - postgres
    volumes:
      - ./backend:/app
    networks:
      - research-network
    restart: unless-stopped

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "0.0.0.0:3000:3000"  # 모든 인터페이스에서 접속 가능
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8000}  # 실제 서버 주소로 변경 필요
      - NEXT_PUBLIC_WS_URL=${NEXT_PUBLIC_WS_URL:-ws://localhost:8000}  # 실제 서버 주소로 변경 필요
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - research-network
    restart: unless-stopped

  # Ollama Service
  ollama:
    image: ollama/ollama:latest
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - research-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 4G
    command: >
      sh -c "
        ollama serve &
        sleep 10 &&
        echo 'Pulling gemma3:12b model...' &&
        ollama pull gemma3:12b &&
        echo 'Model ready!' &&
        wait
      "

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: research_db
      POSTGRES_USER: research_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-research_pass}  # 프로덕션에서는 강력한 암호 사용
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - research-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U research_user -d research_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis (for caching)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - research-network
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "0.0.0.0:80:80"
      - "0.0.0.0:443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - research-network
    restart: unless-stopped

volumes:
  ollama_data:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  research-network:
    driver: bridge