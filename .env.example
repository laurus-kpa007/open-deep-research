# Environment Variables for Deep Research Agent
# Copy this file to .env and update with your actual values

# LLM Provider Configuration
# Choose your LLM provider: ollama, vllm, or openai
LLM_PROVIDER=ollama

# Ollama Configuration
# Set your Ollama server URL (local or remote)
OLLAMA_BASE_URL=http://localhost:11434
# Choose your preferred model (e.g., gemma3:4b, gemma3:12b, llama2, deepseek-r1:8b)
OLLAMA_MODEL=gemma3:4b

# vLLM Configuration (OpenAI API Compatible)
# Set your vLLM server URL
VLLM_BASE_URL=http://localhost:8000
# Model name as registered in vLLM (e.g., meta-llama/Llama-3-8b, mistralai/Mixtral-8x7B)
VLLM_MODEL=meta-llama/Llama-3-8b
# Optional: API key for vLLM (leave as "dummy" for local vLLM, or set your actual key)
VLLM_API_KEY=dummy

# Hybrid Mode Configuration (Optional)
# Use different providers for different stages
# SUMMARIZATION_PROVIDER=ollama
# RESEARCH_PROVIDER=vllm
# COMPRESSION_PROVIDER=ollama
# FINAL_REPORT_PROVIDER=vllm

# Search API Configuration
# Get your API key from https://app.tavily.com/
TAVILY_API_KEY=your_tavily_api_key_here

# Database Configuration
# SQLite for development, PostgreSQL for production
DATABASE_URL=sqlite:///./research_database.db
# For PostgreSQL: postgresql+asyncpg://user:password@localhost:5432/dbname

# Security
# Generate a secure secret key for production
SECRET_KEY=change-this-to-a-secure-secret-key
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30

# CORS Configuration
# Add all allowed origins (comma-separated)
# For remote access, add your server IP: http://YOUR_IP:3000
CORS_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
FRONTEND_URL=http://localhost:3000

# Logging
LOG_LEVEL=INFO

# Docker Configuration (for docker-compose)
COMPOSE_PROJECT_NAME=deep-research-agent

# Environment Mode
NODE_ENV=development
ENVIRONMENT=development

# Next.js Configuration (Frontend)
# Update these with your server IP for remote access
NEXT_PUBLIC_API_URL=http://localhost:8000
NEXT_PUBLIC_WS_URL=ws://localhost:8000

# Production Database (for docker-compose.prod.yml)
# POSTGRES_PASSWORD=strong_password_here
# REDIS_PASSWORD=strong_redis_password_here